Concuerror v0.17 ('189e1f0') started at 19 Sep 2017 17:50:46
 Options:
  [{after_timeout,1000},
   {assertions_only,false},
   {assume_racing,false},
   {depth_bound,500},
   {disable_sleep_sets,false},
   {dpor,optimal},
   {entry_point,{test,t_reg_or_locate2,[]}},
   {exclude_module,[]},
   {files,["../test.erl"]},
   {ignore_error,[deadlock]},
   {instant_delivery,true},
   {interleaving_bound,infinity},
   {keep_going,true},
   {non_racing_system,[]},
   {pa,"ebin"},
   {print_depth,20},
   {quiet,true},
   {scheduling,round_robin},
   {scheduling_bound_type,none},
   {show_races,false},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,infinity},
   {treat_as_normal,[shutdown]},
   {use_receive_patterns,true}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    in gen_server.erl line 381
  99: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 100: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 101: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 102: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 103: P.1.1: 1 = ets:select_delete(gproc, [{{{P.2,{'_',l,'_'}},'_'},[],[true]}])
    in gproc.erl line 2372
 104: P.1.1: true = ets:delete(gproc, {P.2,l})
    in gproc.erl line 2373
 105: P.1.4: exits abnormally (shutdown)
 106: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 107: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 108: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 109: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 110: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 111: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 112: P.1.3: exits abnormally (shutdown)
 113: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 114: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 115: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 116: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 117: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 118: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 119: P.1.2: exits abnormally (shutdown)
 120: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 121: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 122: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 123: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 124: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 125: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 126: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 127: P.1.1: exits abnormally (shutdown)
 128: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 129: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 130: P.1: exits normally
 131: P.1: true = ets:delete(gproc)
    (while exiting)
 132: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 133: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 134: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Interleaving #2
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    in gen_server.erl line 381
  99: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 100: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 101: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 102: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 103: P.1.1: 1 = ets:select_delete(gproc, [{{{P.2,{'_',l,'_'}},'_'},[],[true]}])
    in gproc.erl line 2372
 104: P.1.4: exits abnormally (shutdown)
 105: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 106: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 107: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 108: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 109: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 110: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 111: P.1.3: exits abnormally (shutdown)
 112: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 113: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 114: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 115: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 116: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 117: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 118: P.1.2: exits abnormally (shutdown)
 119: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 120: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 121: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 122: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 123: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 124: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 125: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 126: P.1.1: exits abnormally (shutdown)
 127: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 128: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 129: P.1: exits normally
 130: P.1: true = ets:delete(gproc)
    (while exiting)
 131: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 132: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 133: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Interleaving #3
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    in gen_server.erl line 381
  99: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 100: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 101: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 102: P.1.1: true = ets:delete(gproc, {{n,l,foo},n})
    in gproc.erl line 2325
 103: P.1.4: exits abnormally (shutdown)
 104: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 105: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 106: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 107: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 108: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 109: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 110: P.1.3: exits abnormally (shutdown)
 111: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 112: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 113: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 114: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 115: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 116: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 117: P.1.2: exits abnormally (shutdown)
 118: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 119: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 120: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 121: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 122: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 123: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 124: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 125: P.1.1: exits abnormally (shutdown)
 126: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 127: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 128: P.1: exits normally
 129: P.1: true = ets:delete(gproc)
    (while exiting)
 130: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 131: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 132: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Interleaving #4
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    in gen_server.erl line 381
  99: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 100: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 101: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2323
 102: P.1.4: exits abnormally (shutdown)
 103: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 104: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 105: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 106: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 107: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 108: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 109: P.1.3: exits abnormally (shutdown)
 110: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 111: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 112: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 113: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 114: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 115: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 116: P.1.2: exits abnormally (shutdown)
 117: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 118: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 119: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 120: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 121: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 122: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 123: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 124: P.1.1: exits abnormally (shutdown)
 125: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 126: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 127: P.1: exits normally
 128: P.1: true = ets:delete(gproc)
    (while exiting)
 129: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 130: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 131: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Interleaving #5
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    in gen_server.erl line 381
  99: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 100: P.1.1: [{{n,l,foo},[]}] = ets:select(gproc, [{{{P.2,'$1'},'$2'},[{'==',{element,2,'$1'},l}],[{{'$1','$2'}}]}])
    in gproc.erl line 2317
 101: P.1.4: exits abnormally (shutdown)
 102: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 103: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 104: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 105: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 106: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 107: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 108: P.1.3: exits abnormally (shutdown)
 109: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 110: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 111: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 112: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 113: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 114: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 115: P.1.2: exits abnormally (shutdown)
 116: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 117: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 118: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 119: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 120: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 121: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 122: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 123: P.1.1: exits abnormally (shutdown)
 124: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 125: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 126: P.1: exits normally
 127: P.1: true = ets:delete(gproc)
    (while exiting)
 128: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 129: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 130: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Interleaving #6
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    in gen_server.erl line 381
  99: P.1.1: true = ets:member(gproc, {P.2,l})
    in gproc.erl line 2313
 100: P.1.4: exits abnormally (shutdown)
 101: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 102: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 103: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 104: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 105: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 106: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 107: P.1.3: exits abnormally (shutdown)
 108: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 109: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 110: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 111: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 112: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 113: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 114: P.1.2: exits abnormally (shutdown)
 115: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 116: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 117: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 118: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 119: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 120: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 121: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 122: P.1.1: exits abnormally (shutdown)
 123: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 124: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 125: P.1: exits normally
 126: P.1: true = ets:delete(gproc)
    (while exiting)
 127: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 128: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 129: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Interleaving #7
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    in gen_server.erl line 381
  99: P.1.4: exits abnormally (shutdown)
 100: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 101: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 102: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 103: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 104: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 105: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 106: P.1.3: exits abnormally (shutdown)
 107: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 108: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 109: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 110: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 111: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 112: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 113: P.1.2: exits abnormally (shutdown)
 114: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 115: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 116: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 117: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 118: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 119: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 120: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 121: P.1.1: exits abnormally (shutdown)
 122: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 123: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 124: P.1: exits normally
 125: P.1: true = ets:delete(gproc)
    (while exiting)
 126: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 127: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 128: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Interleaving #8
--------------------------------------------------------------------------------
Errors found:
* At step 86 process P.2 exited abnormally
    Reason:
      killed
    Stacktrace:
      []
--------------------------------------------------------------------------------
Event trace:
   1: P: undefined = erlang:whereis(gproc_sup)
    in gen.erl line 299
   2: P: [] = erlang:process_info(P, registered_name)
    in proc_lib.erl line 731
   3: P: P.1 = erlang:spawn_opt({proc_lib,init_p,[P,[],gen,init_it,[gen_server,P,P,{local,gproc_sup},supervisor,{{local,gproc_sup},gproc_sup,[]},[]]],[link]})
    in erlang.erl line 2854
   4: P.1: undefined = erlang:put('$ancestors', [P])
    in proc_lib.erl line 241
   5: P.1: undefined = erlang:put('$initial_call', {supervisor,gproc_sup,1})
    in proc_lib.erl line 242
   6: P.1: true = erlang:register(gproc_sup, P.1)
    in gen.erl line 302
   7: P.1: false = erlang:process_flag(trap_exit, true)
    in supervisor.erl line 293
   8: P.1: user = erlang:group_leader()
    in application.erl line 327
   9: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  10: P.1: user = erlang:group_leader()
    in application.erl line 327
  11: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  12: P.1: undefined = ets:info(gproc, name)
    in gproc.erl line 2488
  13: P.1: gproc = ets:new(gproc, [ordered_set,public,named_table,{write_concurrency,true},{read_concurrency,true}])
    in gproc.erl line 2490
  14: P.1: user = erlang:group_leader()
    in application.erl line 327
  15: P.1: [] = ets:match(ac_tab, {{application_master,'$1'},user})
    in application_controller.erl line 326
  16: P.1: undefined = erlang:whereis(gproc)
    in gen.erl line 299
  17: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  18: P.1: P.1.1 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc},gproc,[],[{spawn_opt,[]}]]],[link]})
    in erlang.erl line 2854
  19: P.1.1: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  20: P.1.1: undefined = erlang:put('$initial_call', {gproc,init,1})
    in proc_lib.erl line 242
  21: P.1.1: true = erlang:register(gproc, P.1.1)
    in gen.erl line 302
  22: P.1.1: '$end_of_table' = ets:select(gproc, [{{{'$1',l}},[],['$1']}], 100)
    in gproc.erl line 2502
  23: P.1.1: {ack,P.1.1,{ok,P.1.1}} = P.1 ! {ack,P.1.1,{ok,P.1.1}}
    in proc_lib.erl line 392
  24: P.1: receives message ({ack,P.1.1,{ok,P.1.1}})
    in proc_lib.erl line 348
  25: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  26: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.1},{id,gproc},{mfargs,{gproc,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  27: P.1: undefined = ets:info(gproc_monitor, owner)
  28: P.1: gproc_monitor = ets:new(gproc_monitor, [ordered_set,protected,named_table,{heir,P.1,[]}])
  29: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  30: P.1: P.1.2 = erlang:spawn_link(proc_lib, init_p, [gproc_sup,[P],gproc_monitor,init,[P.1]])
    in proc_lib.erl line 100
  31: P.1.2: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  32: P.1.2: undefined = erlang:put('$initial_call', {gproc_monitor,init,1})
    in proc_lib.erl line 242
  33: P.1.2: normal = erlang:process_flag(priority, high)
    in gproc_monitor.erl line 123
  34: P.1.2: true = erlang:register(gproc_monitor, P.1.2)
    in gproc_monitor.erl line 124
  35: P.1.2: {ack,P.1.2,{ok,P.1.2}} = P.1 ! {ack,P.1.2,{ok,P.1.2}}
    in proc_lib.erl line 392
  36: P.1: receives message ({ack,P.1.2,{ok,P.1.2}})
    in proc_lib.erl line 348
  37: P.1: true = ets:give_away(gproc_monitor, P.1.2, [])
    in gproc_monitor.erl line 104
  38: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  39: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.2},{id,gproc_monitor},{mfargs,{gproc_monitor,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  40: P.1: undefined = erlang:whereis(gproc_bcast)
    in gen.erl line 299
  41: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  42: P.1: P.1.3 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_bcast},gproc_bcast,[],[]]],[link]})
    in erlang.erl line 2854
  43: P.1.3: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  44: P.1.3: undefined = erlang:put('$initial_call', {gproc_bcast,init,1})
    in proc_lib.erl line 242
  45: P.1.3: true = erlang:register(gproc_bcast, P.1.3)
    in gen.erl line 302
  46: P.1.3: {ack,P.1.3,{ok,P.1.3}} = P.1 ! {ack,P.1.3,{ok,P.1.3}}
    in proc_lib.erl line 392
  47: P.1: receives message ({ack,P.1.3,{ok,P.1.3}})
    in proc_lib.erl line 348
  48: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  49: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.3},{id,gproc_bcast},{mfargs,{gproc_bcast,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  50: P.1: undefined = erlang:whereis(gproc_pool)
    in gen.erl line 299
  51: P.1: {registered_name,gproc_sup} = erlang:process_info(P.1, registered_name)
    in proc_lib.erl line 731
  52: P.1: P.1.4 = erlang:spawn_opt({proc_lib,init_p,[gproc_sup,[P],gen,init_it,[gen_server,P.1,P.1,{local,gproc_pool},gproc_pool,[],[]]],[link]})
    in erlang.erl line 2854
  53: P.1.4: undefined = erlang:put('$ancestors', [gproc_sup,P])
    in proc_lib.erl line 241
  54: P.1.4: undefined = erlang:put('$initial_call', {gproc_pool,init,1})
    in proc_lib.erl line 242
  55: P.1.4: true = erlang:register(gproc_pool, P.1.4)
    in gen.erl line 302
  56: P.1.4: {ack,P.1.4,{ok,P.1.4}} = P.1 ! {ack,P.1.4,{ok,P.1.4}}
    in proc_lib.erl line 392
  57: P.1: receives message ({ack,P.1.4,{ok,P.1.4}})
    in proc_lib.erl line 348
  58: P.1: user = erlang:group_leader()
    in error_logger.erl line 213
  59: P.1: {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}} = error_logger ! {notify,{info_report,user,{P.1,progress,[{supervisor,{local,gproc_sup}},{started,[{pid,P.1.4},{id,gproc_pool},{mfargs,{gproc_pool,start_link,...}},{restart_type,permanent},{shutdown,2000},{child_type,...}]}]}}}
    in gen_event.erl line 265
  60: P.1: {ack,P.1,{ok,P.1}} = P ! {ack,P.1,{ok,P.1}}
    in proc_lib.erl line 392
  61: P: receives message ({ack,P.1,{ok,P.1}})
    in proc_lib.erl line 348
  62: P: {P.2,#Ref<0.2141927458.3972005889.167792>} = erlang:spawn_opt({erlang,apply,[#Fun<test.'-t_reg_or_locate2/0-fun-0-'.0>,[]],[monitor]})
    in erlang.erl line 2717
  63: P.2: #Ref<0.2141927458.3972005889.167796> = erlang:monitor(process, P)
    in test.erl line 38
  64: P.2: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  65: P.2: #Ref<0.2141927458.3972005889.167802> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  66: P.2: {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}} = erlang:send(P.1.1, {'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}}, [noconnect])
    in gen.erl line 167
  67: P.1.1: receives message ({'$gen_call',{P.2,#Ref<0.2141927458.3972005889.167802>},{reg,{n,l,foo},the_value}})
    in gen_server.erl line 381
  68: P.1.1: true = ets:insert_new(gproc, {{{n,l,foo},n},P.2,the_value})
    in gproc_lib.erl line 78
  69: P.1.1: true = ets:insert_new(gproc, {{P.2,{n,l,foo}},[]})
  70: P.1.1: true = ets:insert_new(gproc, {{P.2,l}})
    in gproc_lib.erl line 300
  71: P.1.1: #Ref<0.2141927458.3972005889.167818> = erlang:monitor(process, P.2)
    in gproc_lib.erl line 302
  72: P.1.1: {#Ref<0.2141927458.3972005889.167802>,true} = P.2 ! {#Ref<0.2141927458.3972005889.167802>,true}
    in gen_server.erl line 243
  73: P.2: receives message ({#Ref<0.2141927458.3972005889.167802>,true})
    in gen.erl line 169
  74: P.2: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167802>, [flush])
    in gen.erl line 171
  75: P.2: {P.2,ok} = P ! {P.2,ok}
    in test.erl line 40
  76: P: receives message ({P.2,ok})
    in test.erl line 45
  77: P: P.1.1 = erlang:whereis(gproc)
    in gen.erl line 257
  78: P: #Ref<0.2141927458.3972005889.167835> = erlang:monitor(process, P.1.1)
    in gen.erl line 156
  79: P: {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}} = erlang:send(P.1.1, {'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}}, [noconnect])
    in gen.erl line 167
  80: P.1.1: receives message ({'$gen_call',{P,#Ref<0.2141927458.3972005889.167835>},{reg_or_locate,{n,l,foo},undefined,P}})
    in gen_server.erl line 381
  81: P.1.1: [{{{n,l,foo},n},P.2,the_value}] = ets:lookup(gproc, {{n,l,foo},n})
    in gproc.erl line 2072
  82: P.1.1: {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}} = P ! {#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}}
    in gen_server.erl line 243
  83: P: receives message ({#Ref<0.2141927458.3972005889.167835>,{P.2,the_value}})
    in gen.erl line 169
  84: P: true = erlang:demonitor(#Ref<0.2141927458.3972005889.167835>, [flush])
    in gen.erl line 171
  85: P: true = erlang:exit(P.2, kill)
    in test.erl line 47
  86: P.2: exits abnormally (killed)
  87: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed} = erlang:send(P, {'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    (while exiting)
  88: P.2: {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed} = erlang:send(P.1.1, {'DOWN',#Ref<0.2141927458.3972005889.167818>,process,P.2,killed})
    (while exiting)
  89: P: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167792>,process,P.2,killed})
    in test.erl line 48
  90: P: exits normally
  91: P: true = erlang:exit(P.1, normal)
    (while exiting)
  92: P: {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal} = erlang:send(P.2, {'DOWN',#Ref<0.2141927458.3972005889.167796>,process,P,normal})
    (while exiting)
  93: P.1: receives message ({'EXIT',P,normal})
    in gen_server.erl line 381
  94: P.1: #Ref<0.2141927458.3972005889.167872> = erlang:monitor(process, P.1.4)
    in supervisor.erl line 978
  95: P.1: true = erlang:unlink(P.1.4)
    in supervisor.erl line 979
  96: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
  97: P.1: true = erlang:exit(P.1.4, shutdown)
    in supervisor.erl line 954
  98: P.1.4: exits abnormally (shutdown)
  99: P.1.4: {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    (while exiting)
 100: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167872>,process,P.1.4,shutdown})
    in supervisor.erl line 955
 101: P.1: #Ref<0.2141927458.3972005889.167910> = erlang:monitor(process, P.1.3)
    in supervisor.erl line 978
 102: P.1: true = erlang:unlink(P.1.3)
    in supervisor.erl line 979
 103: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 104: P.1: true = erlang:exit(P.1.3, shutdown)
    in supervisor.erl line 954
 105: P.1.3: exits abnormally (shutdown)
 106: P.1.3: {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    (while exiting)
 107: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167910>,process,P.1.3,shutdown})
    in supervisor.erl line 955
 108: P.1: #Ref<0.2141927458.3972005889.167926> = erlang:monitor(process, P.1.2)
    in supervisor.erl line 978
 109: P.1: true = erlang:unlink(P.1.2)
    in supervisor.erl line 979
 110: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 111: P.1: true = erlang:exit(P.1.2, shutdown)
    in supervisor.erl line 954
 112: P.1.2: exits abnormally (shutdown)
 113: P.1.2: true = ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 114: P.1.2: {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    (while exiting)
 115: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167926>,process,P.1.2,shutdown})
    in supervisor.erl line 955
 116: P.1: #Ref<0.2141927458.3972005889.167945> = erlang:monitor(process, P.1.1)
    in supervisor.erl line 978
 117: P.1: true = erlang:unlink(P.1.1)
    in supervisor.erl line 979
 118: P.1: receive timeout expired after 0 ms
    in supervisor.erl line 981
 119: P.1: true = erlang:exit(P.1.1, shutdown)
    in supervisor.erl line 954
 120: P.1.1: exits abnormally (shutdown)
 121: P.1.1: {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown} = erlang:send(P.1, {'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    (while exiting)
 122: P.1: receives message ({'DOWN',#Ref<0.2141927458.3972005889.167945>,process,P.1.1,shutdown})
    in supervisor.erl line 955
 123: P.1: exits normally
 124: P.1: true = ets:delete(gproc)
    (while exiting)
 125: P.1: Exception badarg raised by: ets:give_away(gproc_monitor, P.1, [])
    (while exiting)
 126: P.1: true = ets:delete(gproc_monitor)
    (while exiting)
 127: P.1: true = erlang:exit(P, normal)
    (while exiting)
################################################################################
Exploration completed!
################################################################################
Warnings:
--------------------------------------------------------------------------------
Concuerror does not fully support erlang:get_stacktrace/0, returning an empty list instead. If you need proper support, notify the developers to add this feature.
Some abnormal exit reasons were treated as normal ('--treat_as_normal').

################################################################################
Tips:
--------------------------------------------------------------------------------
An abnormal exit signal was sent to a process. This is probably the worst thing that can happen race-wise, as any other side-effecting operation races with the arrival of the signal. If the test produces too many interleavings consider refactoring your code.
Increase '--print_depth' if output/graph contains "...".

################################################################################
Info:
--------------------------------------------------------------------------------
Instrumented & loaded module test
Automatically instrumented module io_lib
Automatically instrumented module gen_server
Automatically instrumented module gproc_sup
Automatically instrumented module supervisor
Automatically instrumented module gen
Automatically instrumented module proc_lib
Automatically instrumented module erlang
Automatically instrumented module application
Automatically instrumented module application_controller
Automatically instrumented module lists
Automatically instrumented module gproc
Automatically instrumented module gproc_lib
Automatically instrumented module error_logger
Automatically instrumented module gen_event
Automatically instrumented module gproc_monitor
Automatically instrumented module gproc_bcast
Automatically instrumented module gproc_pool
You can see pairs of racing instructions (in the report and '--graph') with '--show_races true'
Continuing after error (-k)

################################################################################
Done at 19 Sep 2017 17:50:48 (Exit status: error)
  Summary: 8 errors, 8/8 interleavings explored
